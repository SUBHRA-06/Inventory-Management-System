#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <windows.h>

// ANSI color codes for Rainbow Text
#define RESET "\033[0m"
#define RED "\033[1;31m"
#define GREEN "\033[1;32m"
#define YELLOW "\033[1;33m"
#define BLUE "\033[1;34m"
#define MAGENTA "\033[1;35m"
#define CYAN "\033[1;36m"
#define WHITE "\033[1;37m"

// Structure for inventory items
typedef struct {
    int id;
    char name[50];
    int quantity;
    float price;
} Item;

#define MAX_ITEMS 100
Item inventory[MAX_ITEMS];
int itemCount = 0;

// Predefined Username and Password for Authentication
const char correctUsername[] = "admin";
const char correctPassword[] = "password123";

// Function to display an inventory-themed background
void displayBackground() {
    system("cls");  // Clears the screen
    printf(BLUE "=======================================\n" RESET);
    printf(YELLOW "     WELCOME TO INVENTORY SHOP \n" RESET);
    printf(BLUE "=======================================\n" RESET);
}

// Function to save inventory to file
void saveToFile() {
    FILE *file = fopen("inventory.txt", "w");
    if (file == NULL) {
        printf(RED "Error saving inventory data!\n" RESET);
        return;
    }
    for (int i = 0; i < itemCount; i++) {
        fprintf(file, "%d %s %d %.2f\n",
                inventory[i].id,
                inventory[i].name,
                inventory[i].quantity,
                inventory[i].price);
    }
    fclose(file);
    printf(GREEN "Inventory data saved successfully!\n" RESET);
}

// Function to add a new item
void addItem() {
    if (itemCount < MAX_ITEMS) {
        printf(YELLOW "Enter Item ID: " RESET);
        scanf("%d", &inventory[itemCount].id);

        printf(YELLOW "Enter Item Name: " RESET);
        scanf(" %[^\n]", inventory[itemCount].name);

        printf(YELLOW "Enter Quantity: " RESET);
        scanf("%d", &inventory[itemCount].quantity);

        printf(YELLOW "Enter Price: " RESET);
        scanf("%f", &inventory[itemCount].price);

        itemCount++;
        printf(GREEN "Item added successfully!\n" RESET);
        saveToFile();
    } else {
        printf(RED "Inventory full! Cannot add more items.\n" RESET);
    }
}

// Function to display inventory
void displayInventory() {
    displayBackground();
    printf(MAGENTA "----- Inventory List -----\n" RESET);
    printf(CYAN "ID\tName\t\tQuantity\tPrice\n" RESET);
    printf("-------------------------------------------------\n");
    for (int i = 0; i < itemCount; i++) {
        printf("%d\t%s\t\t%d\t\t%.2f\n",
               inventory[i].id,
               inventory[i].name,
               inventory[i].quantity,
               inventory[i].price);
    }
}

// Function to buy an item
void buyItem() {
    int id, qty;
    float totalCost;

    printf(YELLOW "Enter Item ID to buy: " RESET);
    scanf("%d", &id);

    for (int i = 0; i < itemCount; i++) {
        if (inventory[i].id == id) {
            printf("Item: %s | Available: %d | Price: â‚¹%.2f\n", inventory[i].name, inventory[i].quantity, inventory[i].price);

            printf(YELLOW "Enter Quantity to Buy: " RESET);
            scanf("%d", &qty);

            if (qty > inventory[i].quantity) {
                printf(RED "Not enough stock available!\n" RESET);
                return;
            }

            inventory[i].quantity -= qty;
            totalCost = qty * inventory[i].price;

            // Apply discount for bulk orders
            if (qty > 10) {
                totalCost *= 0.9; // 10% discount
                printf(GREEN "10%% discount applied!\n" RESET);
            }

            printf(GREEN "Total Bill: %.2f\n" RESET, totalCost);
            saveToFile();
            return;
        }
    }
    printf(RED "Item not found!\n" RESET);
}

// Function to check inventory value
void checkInventoryValue() {
    float totalValue = 0;
    for (int i = 0; i < itemCount; i++) {
        totalValue += inventory[i].quantity * inventory[i].price;
    }
    printf(CYAN "Total Inventory Value: %.2f\n" RESET, totalValue);
}

// Function to search for an item
void searchItem() {
    char searchName[50];
    printf(YELLOW "Enter Item Name to Search: " RESET);
    scanf(" %[^\n]", searchName);

    for (int i = 0; i < itemCount; i++) {
        if (strstr(inventory[i].name, searchName) != NULL) {
            printf(GREEN "Found: %s | ID: %d | Quantity: %d | Price: %.2f\n" RESET,
                   inventory[i].name, inventory[i].id, inventory[i].quantity, inventory[i].price);
            return;
        }
    }
    printf(RED "Item not found!\n" RESET);
}

// Function to restock low inventory items
void restockInventory() {
    for (int i = 0; i < itemCount; i++) {
        if (inventory[i].quantity < 5) {
            printf(YELLOW "Low Stock Alert: %s | Current Stock: %d\n" RESET, inventory[i].name, inventory[i].quantity);
            printf("Enter new quantity to restock: ");
            int newStock;
            scanf("%d", &newStock);
            inventory[i].quantity += newStock;
            printf(GREEN "Stock updated successfully!\n" RESET);
        }
    }
    saveToFile();
}

// Authentication function to verify username and password
int authenticate() {
    char username[50];
    char password[50];

    printf(YELLOW "Enter Username: " RESET);
    scanf(" %[^\n]", username);

    printf(YELLOW "Enter Password: " RESET);
    scanf(" %[^\n]", password);

    // Check if entered username and password match the predefined ones
    if (strcmp(username, correctUsername) == 0 && strcmp(password, correctPassword) == 0) {
        printf(GREEN "Authentication Successful!\n" RESET);
        return 1; // Authentication successful
    } else {
        printf(RED "Invalid username or password!\n" RESET);
        return 0; // Authentication failed
    }
}

// Main menu
int main() {
    displayBackground();

    // Perform authentication
    if (!authenticate()) {
        return 0; // Exit if authentication fails
    }

    int choice;
    while (1) {
        printf(MAGENTA "\n--- Inventory Management System ---\n" RESET);
        printf("1. " RED "Add Item\n" RESET);
        printf("2. " GREEN "Display Inventory\n" RESET);
        printf("3. " CYAN "Search Item\n" RESET);
        printf("4. " YELLOW "Buy Item\n" RESET);
        printf("5. " MAGENTA "Restock Inventory\n" RESET);
        printf("6. " BLUE "Check Inventory Value\n" RESET);
        printf("7. " RED "Exit\n" RESET);

        printf(YELLOW "Enter your choice: " RESET);
        scanf("%d", &choice);

        switch (choice) {
            case 1: addItem(); break;
            case 2: displayInventory(); break;
            case 3: searchItem(); break;
            case 4: buyItem(); break;
            case 5: restockInventory(); break;
            case 6: checkInventoryValue(); break;
            case 7:
                printf(GREEN "Exiting... Thank you!\n" RESET);
                return 0;
            default:
                printf(RED "Invalid choice! Please try again.\n" RESET);
        }
    }
}
